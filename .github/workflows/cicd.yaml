---
# FIXME(ttlgcc): Split workflow into "CI" for pull requests and "CD" for merges into `main`.
name: CICD
on:
  merge_group:
  push:
    branches-ignore:
      - gh-readonly-queue/**
    tags-ignore:
      - "**"
  schedule:
    - cron: "33 01 * * *"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  vars:
    name: Resolve variables
    runs-on: ubuntu-latest
    steps:
      - name: Supported runners
        id: runner-os
        shell: bash
        run: |
          printf 'json=["macos-%s", "macos-13", "ubuntu-%s"]' "$RUNNER_MACOS_VERSION" "$RUNNER_UBUNTU_VERSION" >>"$GITHUB_OUTPUT"
        env:
          # renovate: datasource=github-runners depName=macos
          RUNNER_MACOS_VERSION: "15"
          # renovate: datasource=github-runners depName=ubuntu
          RUNNER_UBUNTU_VERSION: "24.04"
    outputs:
      runner-os: ${{ steps.runner-os.outputs.json }}
  build:
    name: Build
    needs:
      - vars
    strategy:
      fail-fast: true
      matrix:
        os: ${{ fromJSON(needs.vars.outputs.runner-os) }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Bootstrap Lix
        uses: fabrictest/lix-quick-install-action@adf607f89b402b54025ff0a3b459be95559caa72 # v7.1.0
      - name: Set up Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Build `/nix` tarballs
        shell: bash
        run: |
          nix build .#lix-tarballs
      - name: Upload `/nix` tarballs to GitHub
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: tarballs-${{ runner.os }}-${{ runner.arch }}
          path: result/lix-*.tar.*
  test:
    name: Test
    needs:
      - vars
      - build
    strategy:
      fail-fast: true
      matrix:
        os: ${{ fromJSON(needs.vars.outputs.runner-os) }}
        lix-version:
          - 2.91.1
          - 2.90.0
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Download `/nix` tarballs from GitHub
        id: tarballs
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: tarballs-${{ runner.os }}-${{ runner.arch }}
      - name: Install Lix ${{ matrix.lix-version }}
        uses: ./
        with:
          lix-version: ${{ matrix.lix-version }}
          lix-on-tmpfs: true
          tarballs-url: file://${{ steps.tarballs.outputs.download-path }}
      - name: Set up Cachix
        if: ${{ github.repository_owner == 'fabrictest' }}
        uses: cachix/cachix-action@ad2ddac53f961de1989924296a1f236fcfbaa4fc # v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          skipPush: true
      - name: Verify that Lix was installed
        shell: bash
        run: |
          nix-build -v --version
      - name: Verify that one can add a file to the Lix store
        id: lix-store-add
        shell: bash
        run: |
          dd if=/dev/urandom of=probe bs=1024 count=1
          nix-store --add probe | xargs printf probe=%s\\n >>"$GITHUB_OUTPUT"
      - name: Verify that one can push such file to Cachix
        if: ${{ github.repository_owner == 'fabrictest' }}
        shell: bash
        run: |
          cachix push "$cache" "$probe"
        env:
          cache: ${{ vars.CACHIX_CACHE }}
          probe: ${{ steps.lix-store-add.outputs.probe }}
  release:
    name: Release
    needs:
      - test
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref_name == github.event.repository.default_branch }}
    steps:
      - name: Generate bot token
        id: bot-token
        uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}
      - name: Fetch bot ID
        id: bot-id
        shell: bash
        run: |
          gh api /users/"$bot_name" --jq .id | xargs printf user-id=%s\\n >>"$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.bot-token.outputs.token }}
          bot_name: ${{ steps.bot-token.outputs.app-slug }}[bot]
      - name: Cut release
        id: release
        uses: googleapis/release-please-action@7987652d64b4581673a76e33ad5e98e3dd56832f # v4.1.3
        with:
          token: ${{ steps.bot-token.outputs.token }}
          target-branch: ${{ github.ref_name }}
      - name: Check out repository
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.bot-token.outputs.token }}
      - name: Tag major and minor versions
        if: ${{ steps.release.outputs.release_created }}
        shell: bash
        run: |
          for tag in "$tag_major" "$tag_minor"; do
            git tag -d "$tag" ${{ runner.debug && '' || '>/dev/null 2>&1' }} || :
            git tag -a "$tag" -m "Release $tag"
            git push origin :"$tag" ${{ runner.debug && '' || '>/dev/null 2>&1' }} || :
            git push origin "$tag"
          done
        env:
          GIT_AUTHOR_NAME: ${{ steps.bot-token.outputs.app-slug }}[bot]
          GIT_AUTHOR_EMAIL: ${{ steps.bot-id.outputs.user-id }}+${{ steps.bot-token.outputs.app-slug }}[bot]@noreply.users.github.com
          GIT_COMMITTER_NAME: ${{ steps.bot-token.outputs.app-slug }}[bot]
          GIT_COMMITTER_EMAIL: ${{ steps.bot-id.outputs.user-id }}+${{ steps.bot-token.outputs.app-slug }}[bot]@noreply.users.github.com
          tag_major: v${{ steps.release.outputs.major }}
          tag_minor: v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}
    outputs:
      created: ${{ steps.release.outputs.release_created || '' }}
      tag: ${{ steps.release.outputs.tag_name }}
  publish:
    name: Publish
    needs:
      - vars
      - release
    strategy:
      fail-fast: true
      matrix:
        os: ${{ fromJSON(needs.vars.outputs.runner-os) }}
    runs-on: ${{ matrix.os }}
    if: ${{ needs.release.outputs.created }}
    permissions:
      id-token: write
    steps:
      - name: Generate bot token
        id: bot-token
        uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.bot-token.outputs.token }}
      - name: Download `/nix` tarballs
        id: tarballs
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: tarballs-${{ runner.os }}-${{ runner.arch }}
      - name: Attest `/nix` tarballs
        uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        with:
          github-token: ${{ steps.bot-token.outputs.token }}
          subject-path: ${{ steps.tarballs.outputs.download-path }}/lix-*.tar.*
      - name: Attach `/nix` tarballs to the GitHub release
        shell: bash
        run: |
          gh release upload "$tag" "$tarballs"/lix-*.tar.*
        env:
          GH_TOKEN: ${{ steps.bot-token.outputs.token }}
          tag: ${{ needs.release.outputs.tag }}
          tarballs: ${{ steps.tarballs.outputs.download-path }}
